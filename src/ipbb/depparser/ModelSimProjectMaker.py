from __future__ import print_function, absolute_import
import time
import os

from os.path import join, split, exists, splitext, abspath
from .Pathmaker import Pathmaker
from ..tools.common import SmartOpen

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class ModelSimProjectMaker(object):
    # --------------------------------------------------------------
    def __init__(self, aProjInfo, aIPProjName, aReverse=False, aTurbo=True):
        self.projInfo = aProjInfo
        self.ipProjName = aIPProjName
        self.reverse = aReverse
        self.turbo = aTurbo
    # --------------------------------------------------------------

    # --------------------------------------------------------------
    def write(self, aTarget, aScriptVariables, aComponentPaths, aCommandList, aLibs):

        # ----------------------------------------------------------
        # FIXME: Temp assignments
        write = aTarget
        lIPProjDir = abspath(join(self.projInfo.path, self.ipProjName))
        # ----------------------------------------------------------

        # ----------------------------------------------------------

        write('# Autogenerated project build script')
        write(time.strftime('# %c'))
        write()
        write('onerror { quit -code 255 }')

        for setup in (c for c in aCommandList['setup'] if not c.Finalise):
            write('source {0}'.format(setup.FilePath))

        write('vlib xil_defaultlib')

        for lib in set(aLibs):
            write('vlib {0}'.format(lib))
            write('vmap {} {}'.format(lib, lib))

        lSrcs = aCommandList['src'] if not self.reverse else reversed(aCommandList['src'])

        lSrcCommandGroups = []
        # ----------------------------------------------------------
        for src in lSrcs:

            # ----------------------------------------------------------
            if src.Include:

                lPath, lBasename = split(src.FilePath)
                lName, lExt = splitext(lBasename)

                # ----------------------------------------------------------
                if lExt == '.xco':
                    file = abspath(join(lPath, lName + '.vhd'))
                elif lExt == '.xci':
                    # Hack required. The Vivado generated hdl files sometimes
                    # have 'sim' in their path, sometimes don't
                    file = None
                    lIpPath = abspath(
                        join(lIPProjDir, self.ipProjName + '.srcs', 'sources_1', 'ip'))

                    # ----------------------------------------------------------
                    for lDir in ['', 'sim']:
                        for lExt in ['vhd', 'v']:
                            lPathToIp = join(
                                lIpPath, lName, lDir, lName + '.' + lExt)
                            if not exists(join(lPathToIp)):
                                continue

                            file = lPathToIp
                            break
                        # File found, stop here
                        if file is not None:
                            break
                    # ----------------------------------------------------------

                    if file is None:
                        raise IOError(
                            'No simulation source found for core \'' + lBasename + '\'')
                    # ----------------------------------------------------------

                    # And stop here w/o including the file to the source list.
                    # Because it's already been compiled in the ipcores modelsim libraries by vivado.
                    continue
                else:
                    file = src.FilePath
                # ----------------------------------------------------------

                # ----------------------------------------------------------
                if splitext(file)[1] in ['.vhd', '.vhdl']:
                    if src.Vhdl2008:
                        cmd = 'vcom -2008'
                    else:
                        cmd = 'vcom'
                elif splitext(file)[1] == '.v':
                    cmd = 'vlog'

                else:
                    print('# IGNORING unknown source file type in Modelsim build: {0}'.format(
                        src.FilePath))
                    continue
                # ----------------------------------------------------------

                if src.Lib:
                    cmd = '{0} -work {1}'.format(cmd, src.Lib)
                else:
                    cmd = '{0} -work xil_defaultlib'.format(cmd)
                # ----------------------------------------------------------

            if self.turbo:
                # In turbo mode group compilation commands together
                if not lSrcCommandGroups or lSrcCommandGroups[-1]['cmd'] != cmd:
                    lSrcCommandGroups.append( {'cmd': cmd, 'files': [file]} )
                else:
                    lSrcCommandGroups[-1]['files'].append(file)

            else:
                # execute them immediately when turbo is disabled instead
                write('{0} {1}'.format(cmd, file))
            # ----------------------------------------------------------

        if self.turbo:
            # for cmd, files in lSrcCommandGroups.iteritems():
            for item in lSrcCommandGroups:
                write('{0} {1}'.format(item['cmd'], ' '.join(item['files'])))

        for setup in (c for c in aCommandList['setup'] if c.Finalise):
            write('source {0}'.format(setup.FilePath))

# --------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
