
from os.path import relpath

class VivadoPresynthScriptGenerator:

    # --------------------------------------------------------------
    def __init__(self, aProjInfo, aSourceAreaPath, aRepoList):
        self.proj_info = aProjInfo
        self.src_area_path = aSourceAreaPath
        self.repo_list = aRepoList

    # --------------------------------------------------------------
    def write(self, aOutput, aSettings, aComponentPaths, aCommandList, aLibs):
        lScriptContents = '''

        '''

        write = aOutput

        # For each source area, 3 generics:
        #  * <NAME>_GIT_SHA: 28 bits
        #  * <NAME>_GIT_CLEAN: 1 bit
        #  * <NAME>_GIT_REF: string (branch/tag name)
        # 3 generics covering all source areas (values for each repo concantenated):
        #  * GIT_REPOS_NAME: std_logic_vector, 160 bits per repo (UTF-8)
        #  * GIT_REPOS_REF: std_logic_vector, 160 bits per repo (UTF-8)
        #  * GIT_REPOS_SHA: std_logic_vector, 28 bits per repo
        #  * GIT_REPOS_CLEAN: std_logic_vector, 1 bit per repo
        #
        # Commands used to extract git info:
        #  1) git rev-parse --abbrev-ref HEAD   => branch name for branches; 'HEAD' for tagged or specific commits
        #  2) git describe --exact-match        => tag name if current commit matches a tag
        #  3) git rev-parse --short HEAD        => 7-char SHA
        #  4) git diff --quiet HEAD             => Non-zero exit code if local changes not included in commit
        lScriptContents += f"""
            # Autogenerated presynth script (for setting generics containing build metadata)

            # Build time (seconds since epoch)
            set UNIX_TIME [format %04X [clock seconds]]
            puts UNIX_TIME=$UNIX_TIME
            set GENERIC_VALUES "UNIX_TIME=32\'h$UNIX_TIME"

            set ORIG_PWD [pwd]
            set GIT_REPOS_NAME {160 * len(self.repo_list)}'h
            set GIT_REPOS_REF {160 * len(self.repo_list)}'h
            set GIT_REPOS_SHA {28 * len(self.repo_list)}'h
            set GIT_REPOS_CLEAN {len(self.repo_list)}'b

            foreach libName {{{' '.join(self.repo_list)}}} {{
              puts "SOURCE AREA: $libName"
              set varPrefix [string toupper $libName]
              puts varPrefix=$varPrefix
              set varPrefix [string map {{- _}} $varPrefix]
              puts varPrefix=$varPrefix
              binary scan [encoding convertto utf-8 "$libName"] H* hex
              puts "UTF-8-encoded name: $hex"
              append GIT_REPOS_NAME [format %-040s [string range $hex 0 39]]

              cd {relpath(self.src_area_path, self.proj_info.path)}/$libName
              puts "pwd=[pwd]"

              set GIT_REF [exec git rev-parse --abbrev-ref HEAD]
              if {{$GIT_REF == {{HEAD}}}} {{
                set GIT_REF [exec git describe --exact-match]
              }}

              puts GIT_REF=$GIT_REF
              binary scan [encoding convertto utf-8 "$GIT_REF"] H* hex
              puts "UTF-8-encoded ref: $hex"
              append GIT_REPOS_REF [format %-040s [string range $hex 0 39]]

              set GIT_SHA [exec git rev-parse --short HEAD]
              puts GIT_SHA=$GIT_SHA
              set [set varPrefix]_GIT_SHA "28'h$GIT_SHA"
              append GIT_REPOS_SHA $GIT_SHA

              set GIT_CLEAN [string match 0 [catch {{ exec git diff --quiet HEAD }}]]
              puts GIT_CLEAN=$GIT_CLEAN
              append GIT_REPOS_CLEAN $GIT_CLEAN
              set [set varPrefix]_GIT_CLEAN $GIT_CLEAN

              append GENERIC_VALUES " [set varPrefix]_GIT_SHA=28'h$GIT_SHA [set varPrefix]_GIT_CLEAN=1'b$GIT_CLEAN [set varPrefix]_GIT_REF={{\\"$GIT_REF\\"}}"
            }}
            append GENERIC_VALUES " GIT_REPOS_NAME=$GIT_REPOS_NAME GIT_REPOS_REF=$GIT_REPOS_REF GIT_REPOS_SHA=$GIT_REPOS_SHA GIT_REPOS_CLEAN=$GIT_REPOS_CLEAN"
            puts ORIG_PWD=$ORIG_PWD
            cd $ORIG_PWD'

            puts "Generics: $GENERIC_VALUES"
            puts "Current fileset: [current_fileset]"
            puts "Current fileset - files: [get_files [current_fileset]]"
            set_property generic "$GENERIC_VALUES" [current_fileset
        """

        write(lScriptContents)

