
import time
import os
import shutil
from os.path import abspath, join, split, splitext

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class IPCoresSimMaker(object):

    _compiler = 'vcom'

    # --------------------------------------------------------------
    def __init__(self, aProjInfo, aSimlibPath, aSimulator, aExportDir, aIPProjName):
        self.projInfo = aProjInfo
        self.simlibPath = aSimlibPath
        self.simulator = aSimulator
        self.exportdir = aExportDir
        self.ipProjName = aIPProjName

    # --------------------------------------------------------------
    @property
    def targetSimulator(self):
        return self.simulator

    # --------------------------------------------------------------
    def write(self, aTarget, aScriptVariables, aComponentPaths, aCommandList, aLibs):

        lReqVariables = {'device_name', 'device_package', 'device_speed'}
        if not lReqVariables.issubset(aScriptVariables):
            raise RuntimeError("Missing required variables: {}".format(', '.join(lReqVariables.difference(aScriptVariables))))

        write = aTarget

        write('# Autogenerated project build script')
        write(time.strftime('# %c'))
        write()

        lWorkingDir = abspath(join(self.projInfo.path, self.ipProjName))

        # write('set outputDir {0}'.format(lWorkingDir))
        # write('file mkdir {0}'.format(lWorkingDir))

        write(
            'create_project {0} {1} -part {device_name}{device_package}{device_speed} -force'.format(
                self.ipProjName, lWorkingDir, **aScriptVariables
            )
        )

        # Add ip repositories to the project variable
        write('set_property ip_repo_paths {{{}}} [current_project]'.format(
                ' '.join(map( lambda c: c.filepath, aCommandList['iprepo']))
            )
        )

        write('set_property "default_lib" "xil_defaultlib" [current_project]')
        write('set_property "simulator_language" "Mixed" [current_project]')
        write('set_property "source_mgmt_mode" "DisplayOnly" [current_project]')
        write('set_property "target_language" "VHDL" [current_project]')

        write('set_property target_simulator ' + self.targetSimulator + ' [current_project]')

        write(
            'set_property compxlib.{}_compiled_library_dir {} [current_project]'.format(
                self.targetSimulator,
                self.simlibPath
            )
        )

        write()
        lXCIs = []
        for src in reversed(aCommandList['src']):
            lPath, lBasename = split(src.filepath)
            lName, lExt = splitext(lBasename)

            if lExt in ('.xci', '.xcix', '.edn'):
                write(
                    'import_files -norecurse -fileset sources_1 {0}'.format(src.filepath))
                if lExt in ('.xci', '.xcix'):
                    lXCIs.append( (lName, lBasename) )

        if lXCIs:
            lIPs, lIPFiles = zip(*lXCIs)
            write('upgrade_ip [get_ips {0}]'.format(' '.join(lIPs)))

            for lFile in lIPFiles:
                write('generate_target simulation [get_files {0}]'.format(lFile))

        # Is this needed?
        write('set_property top top [get_filesets sim_1]')
        write('export_simulation -force -simulator {} -directory {} -lib_map_path {}'.format(self.targetSimulator, self.exportdir, self.simlibPath))

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
