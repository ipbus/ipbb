
# Modules
import time 

# Specific module elements
from ..depparser import Pathmaker
from ..defaults import kTopEntity
from os.path import abspath, join, split, splitext, dirname

class VivadoHlsProjectMaker(object):
    """
    docstring for VivadoHlsProjectMaker
    """
    # --------------------------------------------------------------
    def __init__(self, aProjInfo):
        self.projInfo = aProjInfo

    # --------------------------------------------------------------
    def write(self, aOutput, aSettings, aComponentPaths, aCommandList, aRootDir):

        write = aOutput
        pathFinder = Pathmaker(aRootDir)

        lReqVariables = {'device_name', 'device_package', 'device_speed'}
        if not lReqVariables.issubset(aSettings.keys()):
            raise RuntimeError("Missing required variables: {}".format(lReqVariables.difference(aSettings)))
        lXilinxPart = "{device_name}{device_package}{device_speed}".format(**aSettings)

        # ----------------------------------------------------------
        write = aOutput
        
        lWorkingDir = abspath(join(self.projInfo.path, self.projInfo.name))
        lTopEntity = aSettings.get('top_entity', kTopEntity)


        # ----------------------------------------------------------

        write('# Autogenerated project build script')
        write(time.strftime("# %c"))
        write()

        write(
            'open_project -reset {0} '.format(self.projInfo.name)
        )

        for setup in (c for c in aCommandList['setup'] if not c.finalize):
            write('source {0}'.format(setup.filepath))

        lHlsSrcs = aCommandList['hlssrc'] 

        for src in lHlsSrcs:


            inc = [pathFinder.getPath(src.package, src.component, 'fw')]
            for p,c in src.includeComponents:
                inc.append(pathFinder.getPath(p, c, 'fw'))
            lIncludes = ' '.join(['-I'+i for i in inc])

            opts = []
            if src.testbench:
                opts += ['-tb']

            if lIncludes or src.cflags:
                opts += ['-cflags {{{}}}'.format(' '.join( (f for f in (lIncludes, src.cflags) if f)))]

            if src.csimflags:
                opts += ['-csimflags {{{}}}'.format(src.csimflags)]

            lCommand = 'add_files {} {}'.format(' '.join(opts), src.filepath)
            write(lCommand)


        write('open_solution -reset sol1')
        write('set_part {{{0}}} -tool vivado'.format(lXilinxPart))

        write('set_top {}'.format(lTopEntity))

        for setup in (c for c in aCommandList['setup'] if c.finalize):
            write('source {0}'.format(setup.filepath))

        write('close_project')
    # --------------------------------------------------------------
